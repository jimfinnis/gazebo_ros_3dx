#
# Usage: make a list of elements with [..mkbox,..mkbox,...] then call
# "world" with that list. Print the result.
#
# Building functions come as two versions - named and anonymous,
# e.g. "mknamedbox" and "mkbox". This is done with a special
# function define word, "buildfunc".

require "xmlgen.ang" import

package sdfgen
public

:world |elements:|
--EOT
<sdf version='1.4'>
  <world name='default'>
    <light name='sun' type='directional'>
      <cast_shadows>1</cast_shadows>
      <pose>0 0 10 0 -0 0</pose>
      <diffuse>0.8 0.8 0.8 1</diffuse>
      <specular>0.2 0.2 0.2 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.1 -0.9</direction>
    </light>
    <model name='ground_plane'>
      <static>1</static>
      <link name='link'>
        <collision name='collision'>
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>100 100</size>
            </plane>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>100</mu>
                <mu2>50</mu2>
              </ode>
            </friction>
            <bounce/>
            <contact>
              <ode/>
            </contact>
          </surface>
          <max_contacts>10</max_contacts>
        </collision>
        <visual name='visual'>
          <cast_shadows>0</cast_shadows>
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>100 100</size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual>
        <velocity_decay>
          <linear>0</linear>
          <angular>0</angular>
        </velocity_decay>
        <self_collide>0</self_collide>
        <kinematic>0</kinematic>
        <gravity>1</gravity>
      </link>
    </model>
    <physics type='ode'>
      <max_step_size>0.001</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>1000</real_time_update_rate>
      <gravity>0 0 -9.8</gravity>
    </physics>
    <scene>
      <ambient>0.4 0.4 0.4 1</ambient>
      <background>0.7 0.7 0.7 1</background>
      <shadows>1</shadows>
    </scene>
    <spherical_coordinates>
      <surface_model>EARTH_WGS84</surface_model>
      <latitude_deg>0</latitude_deg>
      <longitude_deg>0</longitude_deg>
      <elevation>0</elevation>
      <heading_deg>0</heading_deg>
    </spherical_coordinates>
--EOT
?elements each {i?`output@+ "\n"+}
--EOT
    <gui fullscreen='0'>
      <camera name='user_camera'>
        <pose>5 -5 2 0 0.275643 2.35619</pose>
        <view_controller>orbit</view_controller>
      </camera>
    </gui>
  </world>
</sdf>
--EOT
+
;

#private
:mkcounter |:n| 0!n (?n 1+ dup !n);

:mkmaterial
    `material none
    [
     `script none [
                   `uri none "file://media/materials/scripts/gazebo.material" mktag,
                   `name none "Gazebo/Grey" mktag
                   ] mktag
     ] mktag
;

:mkboxinertial
    `inertial none
    [
     `mass none 1 mktag,
     `inertia none 
     [] [% `ixx 1, `ixy 0, `ixz 0, `iyy 1, `iyz 0, `izz 1]
     each {i none ival mktag,} mktag
     ] 
    mktag
;

:mkboxgeometry |scales:|
    `geometry none
    [
     `box none [
                `size none ?scales mktag
                ] mktag
     ] mktag
;


:mkcylgeometry |rad,len:|
    `geometry none
    [
     `cylinder none [
                     `radius none ?rad mktag,
                     `length none ?len mktag
                ] mktag
     ] mktag
;

:mkcollision |geom:|
    `collision [%`name `collision]
    [
     ?geom,
     `max_contacts none 10 mktag
     ] mktag
;

:mkvisual |geom:|
    `visual [%`name `visual]
    [
     ?geom,
     mkmaterial
     ] mktag
;

:mklink |geom:|
    `link
    [% `name "link_" <<mkcounter>>@+ ]
    [
     mkboxinertial,
     ?geom mkcollision,
     ?geom mkvisual
     ] mktag
;

# takes an anon, and generates two functions - one which doesn't take
# a name and automatically generates one (mk...) and one which you
# supply a name for (mknamed...)

:buildfunc |f,name:ctr|
    mkcounter !ctr
    (?name "_" + ?ctr@ + ?f@) "mk" ?name + def
    ?f "mknamed" ?name + def
;
    
public

# These are the building functions. Each has two forms, one which 
# takes a name after all other arguments (mknamed...)
# and one which autogenerates the name (mk...)

(|x,y,z,sx,sy,sz,name:|
    `model
    [% `name ?name ]
    [
     `pose none [?x,?y,?z,0,0,0] mktag,
     [?sx, ?sy, ?sz] mkboxgeometry mklink,
     `static none 1 mktag
     ] mktag
) "box" buildfunc

# mkcyl.. axis is Z=up.
(|x,y,z,r,l,name:|
    `model
    [% `name ?name ]
    [
     `pose none [?x,?y,?z,0,0,0] mktag,
     ?r ?l mkcylgeometry mklink,
     `static none 1 mktag
     ] mktag
) "cyl" buildfunc

    
